upstream client {
    server client:8000;
}

upstream server {
    server server:8001;
}

upstream model {
    server model1:8002;
    server model2:8003;
    server model3:8004;
    # Add more instances as needed
}

server {
    listen 80;
    server_tokens on;

    location /model {
        proxy_pass http://model;
    }

    location /api {
        proxy_pass http://server;
    }

    location / {
        proxy_pass http://client;
        gzip on;
        gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
        gzip_min_length 1000;
        gzip_comp_level 6;
        gzip_vary on;
        expires 1h;
        add_header Cache-Control "public, max-age=3600";
    }

    # Add security headers
    add_header X-Content-Type-Options "nosniff";
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'";
    
    # Load balancing configuration for model instances
    # Use round-robin algorithm to distribute requests
    # Add other parameters as needed
    upstream model {
        server model1:8002;
        server model2:8003;
        server model3:8004;
        # Add more instances as needed
        # Round-robin algorithm
        # Use consistent hashing for sticky sessions if needed
        # Other parameters can be adjusted as per requirements
        # See https://nginx.org/en/docs/http/ngx_http_upstream_module.html for details
        # Example: 
        # ip_hash;
        # keepalive 32;
        # server_timeout 30s;
        # ping 10s;
        # ping_timeout 5s;
        # max_fails 3;
        # fail_timeout 30s;
    }
    
    # Disable access logs
    access_log off;
}
